package com.romagmir.biketrack.activities

import android.content.SharedPreferences
import android.os.Bundle
import androidx.preference.*
import com.google.firebase.auth.FirebaseUser
import com.romagmir.biketrack.R
import com.romagmir.biketrack.ui.FirebaseUserActivity
import com.romagmir.biketrack.ui.NumberPickerPreference
import com.romagmir.biketrack.ui.NumberPickerPreferenceDialog
import com.romagmir.biketrack.utils.PreferencesSynchronizer
import kotlin.reflect.KProperty

/**
 * Handles the app settings.
 *
 * This activity is mostly autogenerated by Android Studio
 */
class SettingsActivity : FirebaseUserActivity() {
    private lateinit var sync: PreferencesSynchronizer

    /**
     * Perform initialization of all fragments.
     *
     * @param savedInstanceState If the activity is being re-initialized after
     *     previously being shut down then this Bundle contains the data it most
     *     recently supplied in [onSaveInstanceState].
     */
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.settings_activity)
        if (savedInstanceState == null) {
            supportFragmentManager
                .beginTransaction()
                .replace(R.id.settings, SettingsFragment())
                .commit()
        }
        // Enable the "back arrow" on the toolbar to go back to the previous activity
        setSupportActionBar(findViewById(R.id.toolbar))
        supportActionBar?.setDisplayHomeAsUpEnabled(true)
    }

    override fun onResume() {
        super.onResume()

        // Read settings from database
        user?.let {
            sync.download()
        }
    }

    override fun onPause() {
        super.onPause()

        // Write settings on database
        user?.let {
            sync.upload()
        }
    }

    override fun onUserChanged(
        property: KProperty<*>,
        oldValue: FirebaseUser?,
        newValue: FirebaseUser?
    ) {
        super.onUserChanged(property, oldValue, newValue)

        // Synchronize settings from database
        newValue?.let {
            val preferences = PreferenceManager.getDefaultSharedPreferences(this)
            sync = PreferencesSynchronizer(this, it, preferences)
        }
    }

    class SettingsFragment : PreferenceFragmentCompat() {
        /** Preferences used by the fragment */
        private lateinit var sharedPrefs: SharedPreferences

        override fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {
            setPreferencesFromResource(R.xml.root_preferences, rootKey)
            sharedPrefs = PreferenceManager.getDefaultSharedPreferences(context)
        }

        override fun onResume() {
            super.onResume()
            sharedPrefs.registerOnSharedPreferenceChangeListener(prefChangeListener)
        }

        override fun onPause() {
            super.onPause()
            sharedPrefs.unregisterOnSharedPreferenceChangeListener(prefChangeListener)
        }

        override fun onDisplayPreferenceDialog(preference: Preference?) {
            if (parentFragmentManager.findFragmentByTag(DIALOG_FRAGMENT_TAG) != null) {
                return
            }

            if (preference is NumberPickerPreference) {
                // Display [NumberPickerPreferenceDialog]
                val dialog = NumberPickerPreferenceDialog.newInstance(preference.key)
                dialog.setTargetFragment(this, 0)
                dialog.show(parentFragmentManager, DIALOG_FRAGMENT_TAG)
            } else {
                super.onDisplayPreferenceDialog(preference)
            }
        }

        /**
         * Listens to preference value changes and keeps the UI updated with new data
         */
        private val prefChangeListener = object : SharedPreferences.OnSharedPreferenceChangeListener {
            /**
             * Called when a shared preference is changed, added, or removed. This
             * may be called even if a preference is set to its existing value.
             *
             * This callback will be run on your main thread.
             *
             *
             * *Note: This callback will not be triggered when preferences are cleared
             * via [Editor.clear], unless targeting [android.os.Build.VERSION_CODES.R]
             * on devices running OS versions [Android R][android.os.Build.VERSION_CODES.R]
             * or later.*
             *
             * @param sharedPreferences The [SharedPreferences] that received the change.
             * @param key The key of the preference that was changed, added, or removed. Apps targeting
             * [android.os.Build.VERSION_CODES.R] on devices running OS versions
             * [Android R][android.os.Build.VERSION_CODES.R] or later, will receive
             * a `null` value when preferences are cleared.
             */
            override fun onSharedPreferenceChanged(
                sharedPreferences: SharedPreferences?,
                key: String?,
            ) {
                if (sharedPreferences == null || key == null) return

                val pref = this@SettingsFragment.findPreference<Preference>(key)
                pref?.let {
                    when (it) {
                        is SeekBarPreference ->
                            it.value = sharedPreferences.getInt(key, 0)
                        is SwitchPreference ->
                            it.isChecked = sharedPreferences.getBoolean(key, false)
                        else -> {
                            it.summary = sharedPreferences.all[key].toString()
                        }
                    }
                }
            }
        }

        companion object {
            /** Dialog used by the [NumberPickerPreferenceDialog][com.romagmir.biketrack.ui.NumberPickerPreferenceDialog] fragment */
            private const val DIALOG_FRAGMENT_TAG = "NumberPickerDialog"
        }
    }
}